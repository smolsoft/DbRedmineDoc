using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Xml.Linq;
using System.Xml.XPath;

namespace DbRedmineDoc.WikiAdapters
{
    public class Redmine : IWiki
    {
        private string key;
        private string root;

        public Redmine(string key, string root)
        {
            this.key = key;
            this.root = root;
        }

        private string GetWikiPageAddress(string name)
        {
            return$"{root}/wiki/{name}.xml";
        }

        public async Task<(string content, DateTime updated)> GetWikiPage(string name)
        {
            HttpClient http = new HttpClient();
            http.DefaultRequestHeaders.Add("X-Redmine-API-Key", key);
            var result = await http.GetAsync(GetWikiPageAddress(name));

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                XDocument xml = XDocument.Load(await result.Content.ReadAsStreamAsync());
                string text = xml.XPathSelectElement("wiki_page/text").Value;
                var updated = DateTime.Parse(xml.XPathSelectElement("wiki_page/updated_on").Value);
                return (text, updated);
            }
            else
            {
                return ("", DateTime.MaxValue);
            }
        }

        public async Task<bool> SetWikiPage(string name, string content, string parent)
        {
            HttpClient http = new HttpClient();
            http.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/xml"));
            http.DefaultRequestHeaders.Add("X-Redmine-API-Key", key);

            string parentXml = string.IsNullOrEmpty(parent) ? "" : $"<parent>{parent}</parent>";
            StringContent httpContent = new StringContent(
                $"<?xml version=\"1.0\"?><wiki_page>{parentXml}<text>{content}</text>" +
                "<comments>Generated by DbRedmineDoc tool</comments></wiki_page>", Encoding.UTF8, "application/xml");

            var result = await http.PutAsync(GetWikiPageAddress(name)/*.Replace(".xml", ".json")*/, httpContent);
            if (!result.IsSuccessStatusCode)
                throw new Exception(result.StatusCode.ToString());
            return result.IsSuccessStatusCode;
        }
    }
}
